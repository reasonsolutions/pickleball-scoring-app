rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Tournament rules
    match /tournaments/{tournamentId} {
      // Allow public read access for tournaments (for home page and TV display)
      allow read: if true;
      
      // Allow creating tournaments if user is authenticated and is the creator
      allow create: if request.auth != null &&
                   request.auth.uid == request.resource.data.createdBy &&
                   isValidTournamentData(request.resource.data);
      
      // Allow updating only by the tournament creator with valid data
      allow update: if request.auth != null &&
                   request.auth.uid == resource.data.createdBy &&
                   isValidTournamentData(request.resource.data);
      
      // Allow deleting only by the tournament creator (no data validation needed for delete)
      allow delete: if request.auth != null &&
                   request.auth.uid == resource.data.createdBy;
    }
    
    // Players collection rules
    match /players/{playerId} {
      // Allow all authenticated users to read players
      allow read: if request.auth != null;
      
      // Allow creating players if user is authenticated and is the creator
      allow create: if request.auth != null &&
                   request.auth.uid == request.resource.data.createdBy &&
                   isValidPlayerData(request.resource.data);
      
      // Allow updating only by the player creator with valid data
      allow update: if request.auth != null &&
                   request.auth.uid == resource.data.createdBy &&
                   isValidPlayerData(request.resource.data);
      
      // Allow deleting only by the player creator (no data validation needed for delete)
      allow delete: if request.auth != null &&
                   request.auth.uid == resource.data.createdBy;
    }
    
    // Teams collection rules
    match /teams/{teamId} {
      // Allow public read access for teams (for streaming overlay and TV display)
      allow read: if true;
      
      // Allow creating teams if user is authenticated and is the creator
      allow create: if request.auth != null &&
                   request.auth.uid == request.resource.data.createdBy &&
                   isValidTeamData(request.resource.data);
      
      // Allow updating only by the team creator with valid data
      allow update: if request.auth != null &&
                   request.auth.uid == resource.data.createdBy &&
                   isValidTeamData(request.resource.data);
      
      // Allow deleting only by the team creator (no data validation needed for delete)
      allow delete: if request.auth != null &&
                   request.auth.uid == resource.data.createdBy;
    }
    
    // Fixtures collection rules - COMPLETELY OPEN FOR TESTING
    match /fixtures/{fixtureId} {
      // Allow all operations for testing
      allow read, write: if true;
    }
    
    // Fixture Groups collection rules - COMPLETELY OPEN FOR TESTING
    match /fixtureGroups/{fixtureGroupId} {
      // Allow all operations for testing
      allow read, write: if true;
    }
    
    // Users collection rules - Enhanced for super admin management
    match /users/{userId} {
      // Users can read/write their own profile
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Super admins can read all user documents
      allow read, list: if request.auth != null && isSuperAdminSimple();
      
      // Super admins can create new user documents with valid data
      allow create: if request.auth != null &&
                   isSuperAdminSimple() &&
                   isValidUserData(request.resource.data);
      
      // Super admins can update user documents with valid data
      allow update: if request.auth != null &&
                   isSuperAdminSimple() &&
                   isValidUserData(request.resource.data);
      
      // Super admins can delete user documents (except their own)
      allow delete: if request.auth != null &&
                   isSuperAdminSimple() &&
                   request.auth.uid != userId;
    }
    
    // Venues collection rules
    match /venues/{venueId} {
      // Allow public read access for venues (needed for fixture display)
      allow read: if true;
      
      // Only super admins can create, update, or delete venues
      allow create: if request.auth != null &&
                   isSuperAdminSimple() &&
                   isValidVenueData(request.resource.data);
      
      allow update: if request.auth != null &&
                   isSuperAdminSimple() &&
                   isValidVenueData(request.resource.data);
      
      allow delete: if request.auth != null &&
                   isSuperAdminSimple();
    }
    
    // Featured Videos collection rules
    match /featuredVideos/{videoId} {
      // Allow public read access for featured videos (needed for home page)
      allow read: if true;
      
      // Only super admins can create, update, or delete featured videos
      allow create: if request.auth != null &&
                   isSuperAdminSimple() &&
                   isValidFeaturedVideoData(request.resource.data);
      
      allow update: if request.auth != null &&
                   isSuperAdminSimple() &&
                   isValidFeaturedVideoData(request.resource.data);
      
      allow delete: if request.auth != null &&
                   isSuperAdminSimple();
    }
    
    // News collection rules
    match /news/{newsId} {
      // Allow public read access for news (needed for home page)
      allow read: if true;
      
      // Only super admins can create, update, or delete news
      allow create: if request.auth != null &&
                   isSuperAdminSimple() &&
                   isValidNewsData(request.resource.data);
      
      allow update: if request.auth != null &&
                   isSuperAdminSimple() &&
                   isValidNewsData(request.resource.data);
      
      allow delete: if request.auth != null &&
                   isSuperAdminSimple();
    }
    
    // Function to validate news data structure
    function isValidNewsData(data) {
      return data.keys().hasAll(['title', 'subtext', 'publishDate']) &&
             data.title is string &&
             data.subtext is string &&
             data.publishDate is timestamp &&
             (data.description == null || data.description is string) &&
             (data.featuredImage == null ||
              data.featuredImage is string ||
              (data.featuredImage is map &&
               (('url' in data.featuredImage && data.featuredImage.url is string) ||
                ('secure_url' in data.featuredImage && data.featuredImage.secure_url is string)) &&
               (!('public_id' in data.featuredImage) || data.featuredImage.public_id is string))) &&
             (data.featured == null || data.featured is bool) &&
             (data.createdAt == null || data.createdAt is timestamp) &&
             (data.updatedAt == null || data.updatedAt is timestamp);
    }
    
    // Function to validate featured video data structure
    function isValidFeaturedVideoData(data) {
      return data.keys().hasAll(['title', 'youtubeUrl', 'videoId']) &&
             data.title is string &&
             data.youtubeUrl is string &&
             data.videoId is string &&
             (data.description == null || data.description is string) &&
             (data.createdAt == null || data.createdAt is timestamp) &&
             (data.updatedAt == null || data.updatedAt is timestamp);
    }
    
    // Function to validate venue data structure
    function isValidVenueData(data) {
      return data.keys().hasAll(['name', 'createdBy']) &&
             data.name is string &&
             data.createdBy is string &&
             (data.createdAt == null || data.createdAt is timestamp);
    }
    
    // Function to validate tournament data structure
    function isValidTournamentData(data) {
      return data.keys().hasAll(['name', 'description', 'rules', 'prizeMoney', 'startDate', 'endDate', 'categories', 'createdBy']) &&
             data.name is string &&
             data.description is string &&
             data.rules is string &&
             data.prizeMoney is number &&
             data.startDate is timestamp &&
             data.endDate is timestamp &&
             data.categories is map &&
             data.categories.keys().hasAll(['mensSingles', 'mensDoubles', 'womensSingles', 'womensDoubles', 'mixedDoubles']) &&
             data.categories.mensSingles is bool &&
             data.categories.mensDoubles is bool &&
             data.categories.womensSingles is bool &&
             data.categories.womensDoubles is bool &&
             data.categories.mixedDoubles is bool &&
             data.createdBy is string;
    }
    
    // Function to validate player data structure
    function isValidPlayerData(data) {
      return data.keys().hasAll(['name', 'tournamentId', 'createdBy']) &&
             data.name is string &&
             data.tournamentId is string &&
             data.createdBy is string &&
             (data.age == null || data.age is number) &&
             (data.gender == null || data.gender is string) &&
             (data.duprId == null || data.duprId is string) &&
             (data.photo == null ||
              data.photo is string || // Allow direct URL strings for bulk upload
              (data.photo is map &&
               data.photo.keys().hasAll(['url']) &&
               data.photo.url is string &&
               (data.photo.publicId == null || data.photo.publicId is string)));
    }
    
    // Function to validate team data structure
    function isValidTeamData(data) {
      return data.keys().hasAll(['name', 'playerIds', 'tournamentId', 'createdBy']) &&
             data.name is string &&
             data.playerIds is list &&
             data.tournamentId is string &&
             data.createdBy is string &&
             (data.description == null || data.description is string) &&
             (data.adminEmail == null || data.adminEmail is string) &&
             (data.adminUid == null || data.adminUid is string) &&
             (data.logo == null || (data.logo is map &&
              data.logo.keys().hasAll(['url']) &&
              data.logo.url is string &&
              (data.logo.publicId == null || data.logo.publicId is string)));
    }
    
    // Enhanced function to check if current user is super admin
    function isSuperAdminSimple() {
      // Check hardcoded super admin email for backward compatibility OR custom claims role
      return request.auth != null &&
             (request.auth.token.email == 'siddharth@318digital.com' ||
              request.auth.token.role == 'super_admin');
    }
    
    // Function to validate user data structure for super admin creation
    function isValidUserData(data) {
      return data.keys().hasAll(['uid', 'email', 'role']) &&
             data.uid is string &&
             data.email is string &&
             data.role is string &&
             data.role in ['super_admin', 'team_admin'] &&
             (data.displayName == null || data.displayName is string) &&
             (data.photoURL == null || data.photoURL is string) &&
             (data.teamName == null || data.teamName is string) &&
             (data.tournamentId == null || data.tournamentId is string) &&
             (data.tempPassword == null || data.tempPassword is string) &&
             (data.createdAt == null || data.createdAt is timestamp) &&
             (data.updatedAt == null || data.updatedAt is timestamp) &&
             (data.createdBy == null || data.createdBy is string);
    }
  }
}